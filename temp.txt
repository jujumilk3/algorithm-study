<h4>[프로그래머스/Level1/파이썬3(python3)] 신규 아이디 추천</h4>
<h4>문제</h4>
<p>카카오에 입사한 신입 개발자 <code class="inline">네오</code>는 &quot;카카오계정개발팀&quot;에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. &quot;네오&quot;에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.
다음은 카카오 아이디의 규칙입니다.</p>
<ul>
<li>아이디의 길이는 3자 이상 15자 이하여야 합니다.</li>
<li>아이디는 알파벳 소문자, 숫자, 빼기(<code class="inline">-</code>), 밑줄(<code class="inline">_</code>), 마침표(<code class="inline">.</code>) 문자만 사용할 수 있습니다.</li>
<li>단, 마침표(<code class="inline">.</code>)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.</li>

</ul>
<p>&quot;네오&quot;는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.
신규 유저가 입력한 아이디가 <code class="inline">new_id</code> 라고 한다면,</p>
<pre><code class="inline">1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
5단계 new_id가 빈 문자열이라면, new_id에 &quot;a&quot;를 대입합니다.
6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
     만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
</code></pre>
<p>예를 들어, new_id 값이 &quot;...!@BaT#*..y.abcdefghijklm&quot; 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.</p>
<p>1단계 대문자 &#39;B&#39;와 &#39;T&#39;가 소문자 &#39;b&#39;와 &#39;t&#39;로 바뀌었습니다.
<code class="inline">&quot;...!@BaT#*..y.abcdefghijklm&quot;</code> → <code class="inline">&quot;...!@bat#*..y.abcdefghijklm&quot;</code></p>
<p>2단계 &#39;!&#39;, &#39;@&#39;, &#39;#&#39;, &#39;<em>&#39; 문자가 제거되었습니다.
`&quot;...!@bat#</em>..y.abcdefghijklm&quot;<code class="inline">→</code>&quot;...bat..y.abcdefghijklm&quot;`</p>
<p>3단계 &#39;...&#39;와 &#39;..&#39; 가 &#39;.&#39;로 바뀌었습니다.
<code class="inline">&quot;...bat..y.abcdefghijklm&quot;</code> → <code class="inline">&quot;.bat.y.abcdefghijklm&quot;</code></p>
<p>4단계 아이디의 처음에 위치한 &#39;.&#39;가 제거되었습니다.
<code class="inline">&quot;.bat.y.abcdefghijklm&quot;</code> → <code class="inline">&quot;bat.y.abcdefghijklm&quot;</code></p>
<p>5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
<code class="inline">&quot;bat.y.abcdefghijklm&quot;</code> → <code class="inline">&quot;bat.y.abcdefghijklm&quot;</code></p>
<p>6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.
<code class="inline">&quot;bat.y.abcdefghijklm&quot;</code> → <code class="inline">&quot;bat.y.abcdefghi&quot;</code></p>
<p>7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
<code class="inline">&quot;bat.y.abcdefghi&quot;</code> → <code class="inline">&quot;bat.y.abcdefghi&quot;</code></p>
<p>따라서 신규 유저가 입력한 new_id가 &quot;...!@BaT#*..y.abcdefghijklm&quot;일 때, 네오의 프로그램이 추천하는 새로운 아이디는 &quot;bat.y.abcdefghi&quot; 입니다.</p>
<p>신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, &quot;네오&quot;가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.</p>
<h4>제한사항</h4>
<ul>
<li>new_id는 길이 1 이상 1,000 이하인 문자열입니다.</li>
<li>new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.</li>
<li>new_id에 나타날 수 있는 특수문자는 <code class="inline">-_.~!@#$%^&amp;*()=+[{]}:?,&lt;&gt;/</code> 로 한정됩니다.</li>

</ul>
<h4>입출력 예</h4>
<figure><table>
<thead>
<tr><th>no</th><th>new_id</th><th>result</th></tr></thead>
<tbody><tr><td>예1</td><td><code class="inline">&quot;...!@BaT#*..y.abcdefghijklm&quot;</code></td><td><code class="inline">&quot;bat.y.abcdefghi&quot;</code></td></tr><tr><td>예2</td><td><code class="inline">&quot;z-+.^.&quot;</code></td><td><code class="inline">&quot;z--&quot;</code></td></tr><tr><td>예3</td><td><code class="inline">&quot;=.=&quot;</code></td><td><code class="inline">&quot;aaa&quot;</code></td></tr><tr><td>예4</td><td><code class="inline">&quot;123_.def&quot;</code></td><td><code class="inline">&quot;123_.def&quot;</code></td></tr><tr><td>예5</td><td><code class="inline">&quot;abcdefghijklmn.p&quot;</code></td><td><code class="inline">&quot;abcdefghijklmn&quot;</code></td></tr></tbody>
</table></figure>
<h4>입출력 예 설명</h4>
<p><strong>입출력 예 #1</strong>
문제의 예시와 같습니다.</p>
<p><strong>입출력 예 #2</strong>
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>
<p>1단계 변화 없습니다.
2단계 <code class="inline">&quot;z-+.^.&quot;</code> → <code class="inline">&quot;z-..&quot;</code>
3단계 <code class="inline">&quot;z-..&quot;</code> → <code class="inline">&quot;z-.&quot;</code>
4단계 <code class="inline">&quot;z-.&quot;</code> → <code class="inline">&quot;z-&quot;</code>
5단계 변화 없습니다.
6단계 변화 없습니다.
7단계 <code class="inline">&quot;z-&quot;</code> → <code class="inline">&quot;z--&quot;</code></p>
<p><strong>입출력 예 #3</strong>
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>
<p>1단계 변화 없습니다.
2단계 <code class="inline">&quot;=.=&quot;</code> → <code class="inline">&quot;.&quot;</code>
3단계 변화 없습니다.
4단계 <code class="inline">&quot;.&quot;</code> → <code class="inline">&quot;&quot;</code> (new_id가 빈 문자열이 되었습니다.)
5단계 <code class="inline">&quot;&quot;</code> → <code class="inline">&quot;a&quot;</code>
6단계 변화 없습니다.
7단계 <code class="inline">&quot;a&quot;</code> → <code class="inline">&quot;aaa&quot;</code></p>
<p><strong>입출력 예 #4</strong>
1단계에서 7단계까지 거치는 동안 new_id(&quot;123_.def&quot;)는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.</p>
<p><strong>입출력 예 #5</strong>
1단계 변화 없습니다.
2단계 변화 없습니다.
3단계 변화 없습니다.
4단계 변화 없습니다.
5단계 변화 없습니다.
6단계 <code class="inline">&quot;abcdefghijklmn.p&quot;</code> → <code class="inline">&quot;abcdefghijklmn.&quot;</code> → <code class="inline">&quot;abcdefghijklmn&quot;</code>
7단계 변화 없습니다.</p>
<h4>풀이</h4>
<pre class="line-numbers"><code class='language-python' lang='python'>def solution(new_id):
    # first filter
    answer = new_id.lower()
    recommend_id = &#39;&#39;
    # second filter
    for char in answer:
        if char.isalnum() or char in &#39;-_.&#39;:
            recommend_id += char
    # third filter
    answer = recommend_id
    while &#39;..&#39; in answer:
        answer = answer.replace(&#39;..&#39;, &#39;.&#39;)
    # fourth filter
    if answer and answer[0] == &#39;.&#39;:
        answer = answer[1:]
    if answer and answer[-1] == &#39;.&#39;:
        answer = answer[:-1]
    # fifth filter
    if not answer:
        answer += &#39;a&#39;
    # sixth filter
    answer = answer[:15] if len(answer) &gt; 15 else answer
    answer = answer[:-1] if answer[-1] == &#39;.&#39; else answer
    # seventh filter
    while len(answer) &lt; 3:
        answer += answer[-1]
    return answer
</code></pre>
<h4>설명</h4>
<p>위에서 설명하는 각 필터의 기능을 코드로 구현하면 간단하게 할 수 있다. 뭐 말은 간단하게 하지만 사실 세번째 필터 기능 구현에서 조금 애를 먹어 다른 코드를 참고했다. 이렇게 기발한 방법이 있었다니. 나는 뭐 재귀함수를 만들어가지고 문자열을 처음부터 검사하면서 점을 만나면 그 다음 요소를 검사한 다음에 만약에 다음 요소에도 점이 있다면 그 두번째 만난 점을 기준으로 앞의 점을 없애고, 다시 처음부터 문자열을 검사하는... 그런 방법을 생각했었다. 이 생각까지 간 다음에 아 이런 방법은 level1에서 요구할 방법이 아니다 싶어서 다른 코드를 참고해서 완성했다. 나머지는 크게 고민할 필요 없는 부분이라 간단했다.</p>
