<h4>[프로그래머스/Level2/파이썬3(python3)] 튜플</h4>
<h4>문제</h4>
<p>셀수있는 수량의 순서있는 열거 또는 어떤 순서를 따르는 요소들의 모음을 튜플(tuple)이라고 합니다. n개의 요소를 가진 튜플을 n-튜플(n-tuple)이라고 하며, 다음과 같이 표현할 수 있습니다.</p>
<ul>
<li>(a1, a2, a3, ..., an)</li>

</ul>
<p>튜플은 다음과 같은 성질을 가지고 있습니다.</p>
<ol>
<li>중복된 원소가 있을 수 있습니다. ex : (2, 3, 1, 2)</li>
<li>원소에 정해진 순서가 있으며, 원소의 순서가 다르면 서로 다른 튜플입니다. ex : (1, 2, 3) ≠ (1, 3, 2)</li>
<li>튜플의 원소 개수는 유한합니다.</li>

</ol>
<p>원소의 개수가 n개이고, <strong>중복되는 원소가 없는</strong> 튜플 <code class="inline">(a1, a2, a3, ..., an)</code>이 주어질 때(단, a1, a2, ..., an은 자연수), 이는 다음과 같이 집합 기호 &#39;{&#39;, &#39;}&#39;를 이용해 표현할 수 있습니다.</p>
<ul>
<li>{{a1}, {a1, a2}, {a1, a2, a3}, {a1, a2, a3, a4}, ... {a1, a2, a3, a4, ..., an}}</li>

</ul>
<p>예를 들어 튜플이 (2, 1, 3, 4)인 경우 이는</p>
<ul>
<li>{{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}</li>

</ul>
<p>와 같이 표현할 수 있습니다. 이때, 집합은 원소의 순서가 바뀌어도 상관없으므로</p>
<ul>
<li>{{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}</li>
<li>{{2, 1, 3, 4}, {2}, {2, 1, 3}, {2, 1}}</li>
<li>{{1, 2, 3}, {2, 1}, {1, 2, 4, 3}, {2}}</li>

</ul>
<p>는 모두 같은 튜플 (2, 1, 3, 4)를 나타냅니다.</p>
<p>특정 튜플을 표현하는 집합이 담긴 문자열 s가 매개변수로 주어질 때, s가 표현하는 튜플을 배열에 담아 return 하도록 solution 함수를 완성해주세요.</p>
<h4>제한사항</h4>
<ul>
<li>s의 길이는 5 이상 1,000,000 이하입니다.</li>
<li>s는 숫자와 &#39;{&#39;, &#39;}&#39;, &#39;,&#39; 로만 이루어져 있습니다.</li>
<li>숫자가 0으로 시작하는 경우는 없습니다.</li>
<li>s는 항상 중복되는 원소가 없는 튜플을 올바르게 표현하고 있습니다.</li>
<li>s가 표현하는 튜플의 원소는 1 이상 100,000 이하인 자연수입니다.</li>
<li>return 하는 배열의 길이가 1 이상 500 이하인 경우만 입력으로 주어집니다.</li>

</ul>
<h4>입출력 예</h4>
<figure><table class="tg">
<thead>
<tr><th>s</th><th>result</th></tr></thead>
<tbody><tr><td><code class="inline">&quot;{{2},{2,1},{2,1,3},{2,1,3,4}}&quot;</code></td><td>[2, 1, 3, 4]</td></tr><tr><td><code class="inline">&quot;{{1,2,3},{2,1},{1,2,4,3},{2}}&quot;</code></td><td>[2, 1, 3, 4]</td></tr><tr><td><code class="inline">&quot;{{20,111},{111}}&quot;</code></td><td>[111, 20]</td></tr><tr><td><code class="inline">&quot;{{123}}&quot;</code></td><td>[123]</td></tr><tr><td><code class="inline">&quot;{{4,2,3},{3},{2,3,4,1},{2,3}}&quot;</code></td><td>[3, 2, 4, 1]</td></tr></tbody>
</table></figure>
<h4>입출력 예에 대한 설명</h4>
<h5><strong>입출력 예 #1</strong></h5>
<p>문제 예시와 같습니다.</p>
<h5><strong>입출력 예 #2</strong></h5>
<p>문제 예시와 같습니다.</p>
<h5><strong>입출력 예 #3</strong></h5>
<p>(111, 20)을 집합 기호를 이용해 표현하면 {{111}, {111,20}}이 되며, 이는 {{20,111},{111}}과 같습니다.</p>
<h5><strong>입출력 예 #4</strong></h5>
<p>(123)을 집합 기호를 이용해 표현하면 {{123}} 입니다.</p>
<h5><strong>입출력 예 #5</strong></h5>
<p>(3, 2, 4, 1)을 집합 기호를 이용해 표현하면 {{3},{3,2},{3,2,4},{3,2,4,1}}이 되며, 이는 {{4,2,3},{3},{2,3,4,1},{2,3}}과 같습니다.</p>
<h4>풀이</h4>
<pre class="line-numbers"><code class='language-python' lang='python'>def solution(s):
    answer = []
    as_lists = s[2:-2].split(&#39;},{&#39;)
    as_lists.sort(key=len)
    for as_string_list in as_lists:
        as_list = as_string_list.split(&#39;,&#39;)
        for number in as_list:
            integer = int(number)
            if integer not in answer:
                answer.append(integer)
    return answer
</code></pre>
<h4>설명</h4>
<p>푸는 것보다 이해하는 데 더 오래 걸린 문제. 왜 결과값이 똑같은 [2, 1, 3, 4]인데 들어가는 s의 값이 다를까. 역시나 문제를 제대로 읽지 않은 탓이었다. 위 문제설명란에서 튜플의 성질을 설명할 때 {{a1}, {a1, a2}, {a1,a2,a3}...} 이런 식으로 진행된다고 했으니 길이가 짧은 튜플을 우선순위로 배치하여 내부 튜플의 순서는 신경쓰지 않은 채 새로운 숫자가 나올 때마다 그 숫자를 추가해서 완성해나가면 되는 것이었다. 그럼에도 불구하고 설명이 조금 모자란 부분이 있었다고 본다. 중간에 {a3, a1, a2}형태의 튜플도 존재할 수 있다고 하는 게 어땠을까.</p>
