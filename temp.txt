<h4>[프로그래머스/Level2/파이썬3(python3)] 위장</h4>
<h4>문제</h4>
<p>스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.</p>
<p>예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.</p>
<figure><table>
<thead>
<tr><th>종류</th><th>이름</th></tr></thead>
<tbody><tr><td>얼굴</td><td>동그란 안경, 검정 선글라스</td></tr><tr><td>상의</td><td>파란색 티셔츠</td></tr><tr><td>하의</td><td>청바지</td></tr><tr><td>겉옷</td><td>긴 코트</td></tr></tbody>
</table></figure>
<p>스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</p>
<h4>제한사항</h4>
<ul>
<li>clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.</li>
<li>스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.</li>
<li>같은 이름을 가진 의상은 존재하지 않습니다.</li>
<li>clothes의 모든 원소는 문자열로 이루어져 있습니다.</li>
<li>모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 &#39;_&#39; 로만 이루어져 있습니다.</li>
<li>스파이는 하루에 최소 한 개의 의상은 입습니다.</li>

</ul>
<h4>입출력 예</h4>
<figure><table>
<thead>
<tr><th>clothes</th><th>return</th></tr></thead>
<tbody><tr><td>[[&quot;yellowhat&quot;, &quot;headgear&quot;], [&quot;bluesunglasses&quot;, &quot;eyewear&quot;], [&quot;green_turban&quot;, &quot;headgear&quot;]]</td><td>5</td></tr><tr><td>[[&quot;crowmask&quot;, &quot;face&quot;], [&quot;bluesunglasses&quot;, &quot;face&quot;], [&quot;smoky_makeup&quot;, &quot;face&quot;]]</td><td>3</td></tr></tbody>
</table></figure>
<h4>입출력 예 설명</h4>
<p><strong>예제 #1</strong>  </p>
<p>headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.</p>
<pre class="line-numbers"><code>1. yellow_hat
2. blue_sunglasses
3. green_turban
4. yellow_hat + blue_sunglasses
5. green_turban + blue_sunglasses
</code></pre>
<p><strong>예제 #2</strong>  </p>
<p>face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.</p>
<pre class="line-numbers"><code>1. crow_mask
2. blue_sunglasses
3. smoky_makeup
</code></pre>
<h4>풀이</h4>
<pre class="line-numbers"><code class='language-python' lang='python'>def solution(clothes):
    answer = 1
    clothes_dict = {}
    for camo in clothes:
        if not clothes_dict.get(camo[1]):
            clothes_dict[camo[1]] = 1
        else:
            clothes_dict[camo[1]] += 1
    items_list = list(clothes_dict.values())
    for v in items_list:
        answer *= v+1
    return answer - 1
</code></pre>
<h4>설명</h4>
<p>처음에 풀었던 방법은 이렇다.</p>
<pre class="line-numbers"><code class='language-python' lang='python'>from itertools import combinations
def solution(clothes):
    answer = 1
    clothes_dict = {}
    for camo in clothes:
        if not clothes_dict.get(camo[1]):
            clothes_dict[camo[1]] = 1
        else:
            clothes_dict[camo[1]] += 1
    items_list = list(clothes_dict.values())
    for i in range(1, len(items_list) + 1):
        for j in list(combinations(items_list, i)):
            answer += eval(&#39;*&#39;.join([str(n) for n in j]))
    return answer
</code></pre>
<p>처음에 풀었던 방법. 로직은 맞았으나 1번에서 시간초과가 뜬다. 그래서 다른 사람들의 케이스도 찾아보니까 조금 논란이 있는 문제였다. 그러니까 일종의 &quot;수학적 공식을 대입&quot;해서 풀지 않으면 1번에서 통과가 되지 않게 처리해놓은 구조였다. 난 부위별로 들어온 옷 종류의 갯수를 list에 저장해놓고, 그 종류를 선택하는 조합을 전부 구해서 더하는 방식으로 해결하였다. 하지만 이 문제는 순열과 조합에서 필요한 수학공식을 대입해야만 풀 수 있는 문제였다. 수정한 코드가 바로 아래 형태이다.</p>
<pre class="line-numbers"><code class='language-python' lang='python'>def solution(clothes):
    answer = 1
    clothes_dict = {}
    for camo in clothes:
        if not clothes_dict.get(camo[1]):
            clothes_dict[camo[1]] = 1
        else:
            clothes_dict[camo[1]] += 1
    items_list = list(clothes_dict.values())
    for v in items_list:
        answer *= v+1
    return answer - 1
</code></pre>
<p>내가 combinations함수를 써서 조합을 구해 각 경우의 수를 곱한 부분이 간단하게 해결이 되었다. 특정 순열에서 각 요소를 뽑는 모든 경우의 수는 순열의 길이+1 * 순열의 길이+1 * 순열의 길이+1--- 가 되는데 거기에 있어서 각 순열에서 아무것도 선택하지 않는 경우의 수를 위해 v+1의 +1이 들어가고, 이 문제에 있어서 모두 벗은 경우는 제외하므로 마지막의 answer에 - 1 이 붙는다. (v엔 각 순열의 길이. 그러니까 위장품의 종류가 들어있다고 생각하면 편하다)</p>
<p>처음에는 로직은 맞는데 시간초과때문에 틀려서 좀 짜증이 났었는데 4000ms까지 걸렸던 로직이 0.01ms안에 전부 처리가 되는 거 보니 역시 공부하고 배워야겠다는 생각이 든다.</p>
