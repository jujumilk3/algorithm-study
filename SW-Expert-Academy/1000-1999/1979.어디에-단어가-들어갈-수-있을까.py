case_count = int(input())

for i in range(1, case_count + 1):
    size, length = list(map(int, input().split()))
    matrix = []
    found = 0
    for j in range(size):
        matrix.append(list(map(int, input().split())))
    print(matrix)

    for row in matrix:
        straight = 0
        straights = []
        for index, blank in enumerate(row):
            if blank:
                straight += 1
            else:
                if straight:
                    straights.append(straight)
                straight = 0
            if index == len(row) - 1 and blank:
                straights.append(straight)
        print(straights)
        found += straights.count(length)

    new_matrix = [[] * size for _ in range(size)]

    print('#{} {}'.format(i, found))

"""
2
5 3
0 0 1 1 1
1 1 1 1 0
0 0 1 0 0
0 1 1 1 1
1 1 1 0 1
5 3
1 0 0 1 0
1 1 0 1 1
1 0 1 1 1
0 1 1 0 1
0 1 1 1 0 
"""

"""
10
5 3
0 0 1 1 1
1 1 1 1 0
0 0 1 0 0
0 1 1 1 1
1 1 1 0 1
5 3
1 0 0 1 0
1 1 0 1 1
1 0 1 1 1
0 1 1 0 1
0 1 1 1 0 
8 3
1 1 0 1 0 1 1 1
0 1 0 1 0 0 0 1
1 1 1 0 0 1 0 1
0 1 0 1 0 1 1 1
0 0 0 1 0 1 0 1
1 1 1 1 1 1 0 0
0 1 0 0 0 1 0 1
1 1 1 0 1 1 1 1 
8 4
0 1 1 1 0 1 1 1
1 0 0 1 0 1 0 0
1 0 0 1 1 1 0 1
1 1 1 0 0 1 1 1
0 0 1 0 0 1 0 1
1 1 1 1 1 0 0 0
0 1 0 0 1 0 0 0
1 1 1 0 1 1 1 0 
10 3
0 1 0 0 0 1 0 0 0 1
0 1 0 1 0 1 0 1 1 1
1 1 1 1 1 1 1 1 0 1
0 1 0 0 1 0 0 1 0 0
0 1 1 1 1 0 1 1 1 0
0 0 0 1 0 1 0 0 1 0
0 1 1 1 0 1 1 1 1 1
0 1 0 0 0 1 0 0 0 1
1 1 1 0 0 0 0 1 1 1
0 0 1 1 1 0 0 1 0 0 
10 4
0 0 1 0 0 0 1 0 0 1
0 0 1 1 0 0 1 1 1 1
1 1 1 1 1 1 1 1 0 1
0 0 1 0 1 0 0 1 0 0
0 1 1 1 1 1 0 1 1 1
0 0 0 1 0 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1
0 0 1 0 0 0 1 0 0 1
1 1 1 0 0 0 0 1 1 1
0 1 0 1 1 0 1 1 1 0 
12 3
0 1 0 1 0 1 0 1 0 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
0 1 1 1 0 1 1 1 0 1 1 1
0 0 1 0 0 0 1 0 0 0 1 0 
12 4
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0
0 1 1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
1 0 1 0 1 0 1 0 1 0 1 0 
15 3
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
1 1 0 1 1 1 0 1 1 1 0 1 1 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
15 2
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 1 1 0 1 1 1 0 1 1 1 0 1 1 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
1 0 1 1 1 0 1 1 1 0 1 1 1 0 1

"""
